# This is a sample config.toml file that can be used to create a track
# To test out this config, run the following commands:
#
#      mkdir -p tracks/sample
#      cp sample_config.toml tracks/sample/config.toml
#      cargo run -- play sample
#
# This will do everything needed to build and play this track
# All configuration options are below

# [output] is required
# This specifies some general options of how to process data
[output]
# `name` is the full, pretty name of this track
# This will be the track title in an album
name = "seq"
# `output_command` is the command which generates output, to be piped to sox
# If [build] is specified, this command is ran from the build directory
# This command is ran as sh -c "$output_command"
output_command = "seq 1 100000000" # this example is pretty boring
# `output_buffer` says how much initial data to capture from output_command
# Making this value smaller yields less audio content, but is faster
# If this output_command takes a long time to finish, lower this value
# Follows `head(1)`'s --bytes format. Run `man head` for more info
output_buffer = "10M"
# `debug` is an optional field, false by default
# It forwards the output of output_command to stdout/stderr, printing results
# If `output_command` fails, this is the recommended way to see what's going wrong
debug = false
# `cache` is an optional field, true by default
# Tells the build system to cache intermediate files. If set to false,
# All files are always re-downloaded, rebuilt, and reprocessed.
# This can be useful during new track testing if
#   output_command output changes without config change
cache = true


# [sox] is required
# This specifies options passed to sox during conversion from raw data to audio
# All values are passed directly to sox. See `man sox` for specifics on each
# Changing these values usually just speed up or slow down generated audio
# If data doesn't sound interesting at first, try tweaking with these values
[sox]
bit_depth = 8
sample_rate = 44000
channels = 2
encoding = "unsigned"
# `other_options` is an optional field
# It injects options directly into the sox invocation command
other_options = ""

# [build] is an optional item
# If present, a build directory will be created for pre-output processing
# output_command will then be ran from this directory
[build]
# `build_command` specifies the command used to set up the build directory
# It is ran as `sh -c "$build_command"`
# This can be used for unziping files, compiling data, or building remote projects
build_command = "sh test.sh"
# `always_rebuild` is an optional field, false by default
# If true, `build_command` will always be ran. This messes with caching
always_rebuild = false
# `http_sources` specifies files to be downloaded prior to running `build_command`
# These files are simply downloaded with `curl`
# Uses the `Last-Modified` request header to trigger a rebuild
http_sources = [
    # For example, the README for this project
    "https://raw.githubusercontent.com/Shizcow/SOTCLK/master/README.md",
]
# `git_sources` specifies git repos to be clones prior to running `build_command`
# These files are simply downloaded with `git`
# If upstream updates, the repo will be pulled and trigger a rebuild
git_sources = [
    # Or the whole project's git repo!
    "https://github.com/Shizcow/SOTCLK",
]
# `copy_me` says whether or not to copy files from this track directory into the build directory
# For example, if the track directory contained the files:
#     - config.toml   <- This file
#     - explode.sh    <- Something that you write
# Then build_command or even output_command could be `sh explode.sh`
# Copied files reside directly within the build directory, not within a created sub-directory
# These files are always copied and cached. Changing in the track directory triggeres a rebuild
copy_me = true

# [[clip]] can be specified zero or more times
# [[clip]] is order sensitive
# Each clip tells ffmpeg where to cut audio from sox's output
# This can be used to compile the more interesting parts of output data
# If no [[clip]] blocks are present, all audio is processed and saved
# Otherwise, only audio specified within the present [[clip]] blocks remain
[[clip]]
# Where to start the clip
# Uses [HH:]MM:SS format
# Implemented via https://docs.rs/chrono/0.4.19/chrono/naive/serde/index.html
start = "0:00:01"
# Where to end the clip, similar to start
end = "0:1:00"
# `position` specifies how to handle start and end times
# Valid values are "absolute" and "relative"
# Absolute positions specify exact positions in the unprocessed audio file
#     for example, if start="0:01:00" and end="00:02:00", two minutes
#     will be clipped from the same spot of the unprocessed audio file,
#     regardless of previous [[clip]] entries
# Relative positions are relative to the last [[clip]]
#     for example, if the last [[clip]] ends at 1:00 and start="0:00:05",
#     this clip would start at 1:05.
#     When set to relative, `end` is also relative. Going from the previous
#     example, if end="00:00:07", the clip would end at 1:12.
position = "absolute"

# As mentioned above, there can be multiple clips
# This is a 30 second clip starting 10 seconds after the last one ended --|
[[clip]]              #                                                  |
start = "0:00:10"     #                                                  |
end = "0:00:30"        #                                                  |
position = "relative" # This "relative" is why <-------------------------|
